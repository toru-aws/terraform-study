name: Terraform + Ansible CI/CD

on:
  push:
    branches:
      - test
    paths:
      - '*.tf'      
      - 'terraform/**/*.tf'
      - 'terraform/**.tftest.hcl'
      - '.github/workflows/*.yaml'
      - 'terraform/modules/**/*.tf'

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get-ip.outputs.ip }}
      s3_bucket: ${{ steps.get-bucket.outputs.bucket }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
      KEY_NAME: ${{ secrets.KEY_NAME }}
      MY_IP: ${{ secrets.MY_IP }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.13.3'

      - name: Terraform init
        run: terraform init

      - name: Terraform fmt check
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: |
          terraform plan \
            -var "db_username=${{ secrets.DB_USERNAME }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "key_name=${{ secrets.KEY_NAME }}" \
            -var "my_ip=${{ secrets.MY_IP }}" \
            -var "notification_email=${{ secrets.NOTIFICATION_EMAIL }}"

      - name: Terraform apply
        run: |
          terraform apply -auto-approve \
            -var "db_username=${{ secrets.DB_USERNAME }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "key_name=${{ secrets.KEY_NAME }}" \
            -var "my_ip=${{ secrets.MY_IP }}" \
            -var "notification_email=${{ secrets.NOTIFICATION_EMAIL }}"

      - name: Get EC2 public IP
        id: get-ip
        run: |
          IP=$(terraform output -raw ec2_public_ip)
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Get S3 bucket name
        id: get-bucket
        run: |
         BUCKET=$(terraform output -raw springboot_bucket_name)
         echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

  build_upload:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clone Spring Boot App
        run: git clone https://github.com/koujienami/aws-study.git app

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Grant execute permission for gradlew   #実行権限付与
        working-directory: app
        run: chmod +x gradlew

      - name: Build JAR
        working-directory: app
        run: ./gradlew clean build

      - name: Get S3 bucket name
        id: get-bucket
        run: |
          BUCKET=$(terraform output -raw springboot_bucket_name)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

  ansible:
    needs: [terraform, build_upload]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible boto3

      - name: Add EC2 host key to known_hosts
        run: |
          install -d -m 700 ~/.ssh
          ssh-keyscan -H ${{ needs.terraform.outputs.ec2_ip }} >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          S3_BUCKET: ${{ needs.terraform.outputs.s3_bucket }}
        run: |
          echo "$EC2_SSH_KEY" > key.pem
          chmod 600 key.pem
          ansible-playbook \
            -i "${{ needs.terraform.outputs.ec2_ip }}," \
            -u ec2-user \
            --private-key key.pem \
            --ssh-extra-args "-o StrictHostKeyChecking=no" \
            ansible/playbook.yml

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true
