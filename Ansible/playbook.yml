- name: Deploy Spring Boot Application
  hosts: all
  collections:
    - amazon.aws

  module_defaults:
    group/aws:
      aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
      aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
      region: ap-northeast-1

  become: true

  tasks:
    # --- Python 関連 ---
    - name: Install pip3 if not installed
      package:
        name: python3-pip
        state: present
    
    - name: Install AWS Python SDK on EC2
      pip:
        name:
          - boto3
          - botocore
        executable: pip3

    - name: Install Python MySQL library
      pip:
        name:
          - PyMySQL
        executable: pip3

    # --- OSアップデート&Java ---
    - name: Update all packages and refresh repos
      command: dnf update -y

    - name: Ensure Java 17 is installed
      package:
        name: java-17-amazon-corretto-devel.x86_64
        state: present

    # --- MySQLクライアント ---
    - name: Add MySQL official repository
      command: >
        dnf -y install https://dev.mysql.com/get/mysql84-community-release-el9-1.noarch.rpm

    - name: Ensure MySQL client is installed
      command: >
        dnf -y install mysql-community-client

    # --- アプリケーションディレクトリ ---
    - name: Create application directory
      file:
        path: /opt/myapp
        state: directory
        mode: '0755'

    - name: Show AWS_DEFAULT_REGION
      debug:
        msg: "AWS_DEFAULT_REGION={{ lookup('env','AWS_DEFAULT_REGION') }}"

    # --- JAR ダウンロード ---
    - name: Download JAR from S3
      amazon.aws.aws_s3:
        bucket: "{{ lookup('env', 'S3_BUCKET') }}"
        object: "myapp.jar"
        dest: /opt/myapp/myapp.jar
        mode: get
        region: ap-northeast-1

    # --- JARからSQL抽出 ---
    - name: Extract create.sql from JAR
      command: "jar xf /opt/myapp/myapp.jar BOOT-INF/classes/create.sql"
      args:
        chdir: /opt/myapp
    
        
    # --- RDS ホストとポートを分割 ---
    - name: Split RDS endpoint into host and port
      set_fact:
        rds_host: "{{ rds_endpoint.split(':')[0] }}"
        rds_port: "{{ rds_endpoint.split(':')[1]|int }}"

    # --- デバッグ用 ---
    - name: Debug RDS endpoint
      debug:
        var: rds_endpoint

    # --- データベース作成 ---
    - name: Ensure awsstudy database exists
      community.mysql.mysql_db:
        name: awsstudy
        state: present
        login_host: "{{ rds_host }}"
        login_port: "{{ rds_port }}"
        login_user: "{{ DB_USERNAME }}"
        login_password: "{{ DB_PASSWORD }}"

    # --- SQL 実行 ---
    - name: Run SQL on RDS
      shell: >
        mysql
        -h {{ rds_host }}
        -P {{ rds_port }}
        -u {{ DB_USERNAME }}
        -p{{ DB_PASSWORD }}
        awsstudy < /opt/myapp/BOOT-INF/classes/create.sql

    # --- systemd サービス作成 ---
    - name: Create systemd service for Spring Boot
      copy:
        dest: /etc/systemd/system/myapp.service
        content: |
          [Unit]
          Description=Spring Boot Application
          After=network.target

          [Service]
          User=ec2-user
          WorkingDirectory=/opt/myapp
          Environment="JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto"
          ExecStart=/usr/bin/java -jar /opt/myapp/myapp.jar --server.address=0.0.0.0 --server.port=8080
          SuccessExitStatus=143
          Restart=always
          RestartSec=10
          StandardOutput=syslog
          StandardError=syslog
          SyslogIdentifier=myapp

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start myapp service
      systemd:
        name: myapp
        enabled: yes
        state: started

    - name: Debug ec2_ip value
      debug:
        var: ec2_ip

    - name: Check service status
      command: systemctl status myapp
      register: svc_status
      ignore_errors: true

    - name: Show service logs for debug
      debug:
        var: svc_status.stdout_lines

    - name: Pause before health check
      pause:
        seconds: 60

    - name: Wait for application to start
      uri:
        url: "http://{{ ec2_ip }}:8080"
        status_code: 200
      register: app_check
      retries: 5
      delay: 15
      until: app_check.status == 200

    - name: Print confirmation
      debug:
        msg: "✅ Spring Boot app started successfully on port 8080 and is accessible externally."
